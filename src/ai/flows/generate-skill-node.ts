'use server';

/**
 * @fileOverview AI flow that generates a complete SkillNode with interactive exercises.
 * 
 * This flow takes a religion and skill details and generates a variety of engaging exercises
 * that follow the Duolingo model of bite-sized, interactive learning.
 */

import { ai } from '../genkit';
import { z } from 'genkit';
import type { SkillNode } from '~/types';

const GenerateSkillNodeInputSchema = z.object({
  religion: z.string().describe('The religion this skill node belongs to'),
  skillTitle: z.string().describe('The title of the skill (e.g., "Core Concepts", "The Buddha")'),
  description: z.string().describe('Brief description of what this skill covers'),
  nodeId: z.string().describe('Unique identifier for this node (e.g., "buddhism-1")')
});

export type GenerateSkillNodeInput = z.infer<typeof GenerateSkillNodeInputSchema>;

const GenerateSkillNodeOutputSchema = z.object({
  id: z.string().describe('The node ID'),
  title: z.string().describe('The skill title'),
  description: z.string().describe('The skill description'),
  exercises: z.array(z.object({
    id: z.string().describe('Unique exercise ID'),
    type: z.enum(['match-pairs', 'fill-in-the-blank', 'image-association', 'principle-sorting', 'multiple-choice', 'true-false', 'sequence-order', 'quote-completion']).describe('Type of exercise'),
    prompt: z.string().describe('Instruction text for the user'),
    data: z.any().describe('Exercise-specific data structure')
  })).describe('Array of 7-10 diverse exercises for this skill')
});

export type GenerateSkillNodeOutput = z.infer<typeof GenerateSkillNodeOutputSchema>;

export async function generateSkillNode(
  input: GenerateSkillNodeInput
): Promise<GenerateSkillNodeOutput> {
  return generateSkillNodeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateSkillNodePrompt',
  input: { schema: GenerateSkillNodeInputSchema },
  output: { schema: GenerateSkillNodeOutputSchema },
  prompt: `You are an expert curriculum designer for religious studies. Your task is to generate a complete, interactive lesson (a "SkillNode") for a Duolingo-style learning app.

**Requirements:**
- Generate exactly 7-10 diverse, engaging exercises
- Must include at least one of each exercise type: 'match-pairs', 'fill-in-the-blank', 'image-association', 'principle-sorting', 'multiple-choice', 'true-false', 'sequence-order', 'quote-completion'
- Exercises should progress from simple recognition to deeper understanding
- Content must be accurate, respectful, and educational
- All exercises must use the exact data structures specified below

**Exercise Type Specifications:**

**match-pairs**: Match terms with definitions
Data structure: { "term": "string", "definition": "string" }[]
Example: [{"term": "Karma", "definition": "Law of cause and effect"}, {"term": "Dharma", "definition": "Righteous path or duty"}]

**fill-in-the-blank**: Complete a quote or teaching
Data structure: { "sentence": "string with ____", "correctAnswer": "string", "options": ["string", "string", "string"] }
Example: {"sentence": "The Buddha taught that life is ____.", "correctAnswer": "suffering", "options": ["suffering", "joyful", "meaningless"]}

**image-association**: Identify religious symbols/objects (will be generated by AI)
Data structure: { "imagePrompt": "Description for AI image generation", "correctAnswer": "string", "options": ["string", "string", "string"] }
Example: {"imagePrompt": "A golden lotus flower floating on calm water", "correctAnswer": "Lotus", "options": ["Lotus", "Rose", "Tulip"]}

**principle-sorting**: Classify items as belonging to a category or not
Data structure: { "category": "string", "items": [{ "text": "string", "correct": boolean }] }
Example: {"category": "Buddhist Noble Truths", "items": [{"text": "Life is suffering", "correct": true}, {"text": "Money brings happiness", "correct": false}]}

**multiple-choice**: Standard multiple choice question
Data structure: { "question": "string", "correctAnswer": "string", "options": ["string", "string", "string", "string"] }
Example: {"question": "Who founded Buddhism?", "correctAnswer": "Siddhartha Gautama", "options": ["Siddhartha Gautama", "Confucius", "Lao Tzu", "Guru Nanak"]}

**true-false**: True or false questions about religious concepts
Data structure: { "statement": "string", "correctAnswer": boolean, "explanation": "string" }
Example: {"statement": "Buddhism teaches that desire is the root of suffering", "correctAnswer": true, "explanation": "This is the Second Noble Truth in Buddhism"}

**sequence-order**: Put events or concepts in correct order
Data structure: { "instruction": "string", "items": ["string", "string", "string"], "correctOrder": [0, 1, 2] }
Example: {"instruction": "Order these Buddhist concepts from most basic to most advanced", "items": ["Meditation", "Right Speech", "Enlightenment"], "correctOrder": [1, 0, 2]}

**quote-completion**: Complete a famous religious quote
Data structure: { "quote": "string with [BLANK]", "correctAnswer": "string", "options": ["string", "string", "string"] }
Example: {"quote": "Be the [BLANK] you wish to see in the world", "correctAnswer": "change", "options": ["change", "person", "light"]}

**Religion:** {{religion}}
**Skill Title:** {{skillTitle}}  
**Description:** {{description}}
**Node ID:** {{nodeId}}

Return ONLY a valid JSON object. No additional text or formatting.`,
});

const generateSkillNodeFlow = ai.defineFlow(
  {
    name: 'generateSkillNodeFlow',
    inputSchema: GenerateSkillNodeInputSchema,
    outputSchema: GenerateSkillNodeOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
); 
